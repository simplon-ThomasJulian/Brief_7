# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'kubernetes'
    command: 'get'
    arguments: 'deployments'
    secretType: 'generic'

- task: Kubernetes@1
  name : Kubekube
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'kubernetes'
    command: 'apply'
    useConfigurationFile: true
    configurationType: 'inline'
    inline: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: voteapp
        labels:
          app: voteapplb
      spec:
        selector:
          matchLabels:
            app: voteapplb
        replicas: 1
        template:
          metadata:
            labels:
              app: voteapplb
          spec:
            containers:
            - name: voteapp
              image: simplonasa/azure_voting_app:v1.0.0
              ports:
              - containerPort: 80
              resources:
                requests:
                  cpu: 250m
                limits:
                  cpu: 500m
              env:
              - name: TITLE
                value: "La pÃªche c'est bien?"
              - name: VOTE1VALUE
                value: "Oui"
              - name: VOTE2VALUE
                value: "Non"
              - name: STRESS_SECS
                value: "3"
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: loadvoteapp
      spec:
        type: ClusterIP
        ports:
        - port: 80
        selector:
          app: voteapplb
    secretType: 'generic'

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'kubernetes'
    command: 'apply'
    useConfigurationFile: true
    configurationType: 'inline'
    inline: |
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: ingress
        annotations:
          kubernetes.io/ingress.class: azure/application-gateway
      spec:
        tls:
          - secretName: test-tls
        rules:
        - http:
            paths:
            - pathType: Prefix
              path: /
              backend:
                service:
                  name: loadvoteapp
                  port:
                    number: 80
    secretType: 'generic'


- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
      import requests
      
      response = requests.get("https://hub.docker.com/v2/repositories/simplonasa/azure_voting_app/tags")
      
      if response.status_code == 200:
      
        tags = response.json()["results"]
        
        lastversion = print(tags[0]["name"])
      else:
      
        print("Failed to get tags for the repository")

- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: 'print(lastversion)'

- task: CmdLine@2
  inputs:
    script: |
      cat /home/vsts/version/version.vote
      mkdir /home/vsts/version
      pwd
      TESTVAR=$(curl 'https://hub.docker.com/v2/repositories/simplonasa/azure_voting_app/tags' | jq '."results"[0]["name"]')
      $NEWVERSION  = echo "$TESTVAR"|sed 's/^.//;s/.$//' > /home/vsts/ver/version
  name: 'TEST'
- bash: echo $TEST.nameofthevariable